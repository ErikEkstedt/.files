#!/usr/bin/env python

# Checks relevant folders hardcoded in the script on their git status.
# DISCLOSURE: Only checks 'git status --porcelain' and can not see if repo
# is behind remote.
#
# Displays paths as green if they are up to date and red if something needs
# doing.
#
# Example
#
# ´´´Bash
#       $ git-script
# ´´´
# Shows clean repos as green and dirty as red. prints out a
# status from each dirty repo

# ´´´Bash
#       $ git-script pull
# ´´´
# iterates through all defined repos and pull
# (have to input ssh password for each TODO: fix)

# ´´´Bash
#       $ git-script push
# ´´´
# Shows status of all repos and the iterates through the
# dirty ones. Displaying status in each and asks user for commit message.

import os
import sys
import subprocess

FOLDERS = ['blog', 'phd','.files', 'voicegen', 'fun', 
           '.personal', 'maptaskdataset', 'Documents/latex/Notes']

bcolors = { 'DARKGREEN' : '\033[90m',
           'WARNING' : '\033[91m',
           'RED' : '\033[91m',
           'FAIL' : '\033[91m',
           'GREEN' : '\033[92m',
           'YELLOW' : '\033[93m',
           'PURPLE' : '\033[94m',
           'PINK' : '\033[95m',
           'BLUE' : '\033[96m',
           'ENDC' : '\033[0m',
           'BOLD' : '\033[1m',
           'UNDERLINE' : '\033[4m',
           }

def printAllColors():
    print(bcolors['DARKGREEN'] + "this is color" + bcolors['ENDC'])
    print(bcolors['RED'] + "this is color" + bcolors['ENDC'])
    print(bcolors['GREEN'] + "this is color" + bcolors['ENDC'])
    print(bcolors['YELLOW'] + "this is color" + bcolors['ENDC'])
    print(bcolors['PURPLE'] + "this is color" + bcolors['ENDC'])
    print(bcolors['PINK'] + "this is color" + bcolors['ENDC'])
    print(bcolors['BLUE'] + "this is color" + bcolors['ENDC'])
    print(bcolors['FAIL'] + "this is color" + bcolors['ENDC'])
    print(bcolors['BOLD'] + "this is BOLDcolor" + bcolors['ENDC'])


def isClean():
    ''' Checks if repoDir is clean
    output from $cmd is empty if clean
    '''
    cmd = "git status --porcelain"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0]
    text = output.decode()
    text = text.split('\n')
    text = text[:-1]   # empty last line
    if len(text) > 0:
        return False
    return True


def checkFolders(folders):
    status = {}
    for f in folders:
        tmp_dir = os.path.join(os.path.expanduser('~'), f)
        if os.path.isdir(tmp_dir):
            os.chdir(tmp_dir)
            status[tmp_dir] = isClean()
    return status


def printStatus(status):
    print()
    dirty = []
    for path, clean in status.items():
        if clean:
            print(bcolors['GREEN'] + path +  bcolors['ENDC'])
        else:
            dirty.append(path)
    [print(bcolors['RED'] + path +  bcolors['ENDC']) for path in dirty]
    return dirty


# This probably will break and could be more robust
# Works for now

def printStatusClearly():
    cmd = "git status --porcelain"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0]
    text = output.decode()
    text = text.split('\n')
    text = text[:-1]   # empty last line
    for line in text:
        if line[0] =='M' or line[1] == 'M':
            print(bcolors['PINK'] +'Modified: ', line[3:], bcolors['ENDC'])
        if line[0] == '?' or line[1] == '?':
            print(bcolors['BLUE'] +'Untracked: ', line[3:], bcolors['ENDC'])
        if line[0] == 'D' or line[1] == 'D':
            print(bcolors['RED'] + 'Deleted: ', line[3:], bcolors['ENDC'])
        if line[0] == 'A' or line[1] == 'A':
            print(bcolors['GREEN'] + 'Added: ', line[3:], bcolors['ENDC'])


def gitStatus(folders):
    status = checkFolders(folders)
    dirty = printStatus(status)
    print()
    for path in dirty:
        os.chdir(path)
        line = '-'*50
        print(bcolors['RED'] + line)
        print(path)
        print(bcolors['ENDC'])
        printStatusClearly()


def printPathLine(path, length=50, color='RED'):
    line = '-'*length
    print(bcolors[color] + line)
    print(path)
    print(bcolors['ENDC'])


def gitPush(folders):
    status = checkFolders(folders)
    dirty = printStatus(status)
    print()
    for path in dirty:
        os.chdir(path)
        printPathLine(path, color='RED')
        printStatusClearly()
        printPathLine('Push', length=25, color='YELLOW')
        gitAddCommitPush(path)


def gitAddCommitPush(path):
    cmd = "git add ."
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    ps.communicate()
    cmd = 'git commit -m "{}"'.format(input('Commit message: '))
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    ps.communicate()  # I believe this might be needed so the code waits before pushing
    cmd = "git push"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0]
    print(output.decode())


def gitPull(folders):
    for f in folders:
        tmp_dir = os.path.join(os.path.expanduser('~'), f)
        if os.path.isdir(tmp_dir):
            os.chdir(tmp_dir)
            printPathLine(tmp_dir, color='YELLOW')
            cmd = "git pull"
            ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
            output = ps.communicate()[0]
            print(output.decode())


def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == 'pull':
            gitPull(FOLDERS)
        elif sys.argv[1] == 'push':
            gitPush(FOLDERS)
        else:
            print(bcolors['WARNING'])
            print('Unknown input: ', bcolors['ENDC'], sys.argv[1])
            print(bcolors['WARNING'] + 'Use "pull", "push" or no input.', bcolors['ENDC'])
            sys.exit()
    else:
        gitStatus(FOLDERS)

if __name__ == "__main__":
    main()

# relevant 'man git status' output:
#
#   Short Format
#       In the short-format, the status of each path is shown as
#
#           XY PATH1 -> PATH2
#
#       where PATH1 is the path in the HEAD, and the " -> PATH2" part is shown only when
#       PATH1 corresponds to a different path in the index/worktree (i.e. the file is
#       renamed). The XY is a two-letter status code.
#
#       The fields (including the ->) are separated from each other by a single space. If a
#       filename contains whitespace or other nonprintable characters, that field will be
#       quoted in the manner of a C string literal: surrounded by ASCII double quote (34)
#       characters, and with interior special characters backslash-escaped.
#
#       For paths with merge conflicts, X and Y show the modification states of each side of
#       the merge. For paths that do not have merge conflicts, X shows the status of the
#       index, and Y shows the status of the work tree. For untracked paths, XY are ??.
#       Other status codes can be interpreted as follows:
#
#       ·   ' ' = unmodified
#
#       ·   M = modified
#
#       ·   A = added
#
#       ·   D = deleted
#
#       ·   R = renamed
#
#       ·   C = copied
#
#       ·   U = updated but unmerged
#
#       Ignored files are not listed, unless --ignored option is in effect, in which case XY
#       are !!.
#
#           X          Y     Meaning
#           -------------------------------------------------
#                     [MD]   not updated
#           M        [ MD]   updated in index
#           A        [ MD]   added to index
#           D         [ M]   deleted from index
#           R        [ MD]   renamed in index
#           C        [ MD]   copied in index
#           [MARC]           index and work tree matches
#           [ MARC]     M    work tree changed since index
#           [ MARC]     D    deleted in work tree
#           -------------------------------------------------
#           D           D    unmerged, both deleted
#           A           U    unmerged, added by us
#           U           D    unmerged, deleted by them
#           U           A    unmerged, added by them
#           D           U    unmerged, deleted by us
#           A           A    unmerged, both added
#           U           U    unmerged, both modified
#           -------------------------------------------------
#           ?           ?    untracked
#           !           !    ignored
#           -------------------------------------------------
#
