#!/usr/bin/env python
# Checks relevant folders hardcoded in the script on their git status.
# DISCLOSURE: Only checks 'git status' and can not see if repo is behind remote.
# Displays paths as green if they are up to date and red if something needs
# doing.

import os
import sys
import subprocess
import git
from git import Repo
import json

class bcolors:
    DARKGREEN = '\033[90m'
    WARNING = '\033[91m'
    RED = '\033[91m'
    FAIL = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    PURPLE = '\033[94m'
    PINK = '\033[95m'
    BLUE = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

    def printAllColors():
        print(bcolors.DARKGREEN + "this is color" + bcolors.ENDC)
        print(bcolors.RED + "this is color" + bcolors.ENDC)
        print(bcolors.GREEN + "this is color" + bcolors.ENDC)
        print(bcolors.YELLOW + "this is color" + bcolors.ENDC)
        print(bcolors.PURPLE + "this is color" + bcolors.ENDC)
        print(bcolors.PINK + "this is color" + bcolors.ENDC)
        print(bcolors.BLUE + "this is color" + bcolors.ENDC)
        print(bcolors.FAIL + "this is color" + bcolors.ENDC)
        print(bcolors.BOLD + "this is BOLDcolor" + bcolors.ENDC)


def isClean():
    cmd = "git status --porcelain"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0]
    text = output.decode()
    text = text.split('\n')
    text = text[:-1]   # empty last line
    if len(text) > 0:
        return False
    return True


def checkFolders(folders):
    status = {}
    for f in folders:
        tmp_dir = os.path.join(os.path.expanduser('~'), f)
        if os.path.isdir(tmp_dir):
            os.chdir(tmp_dir)
            status[tmp_dir] = isClean()
    return status


def printStatus(status):
    print()
    dirty = []
    for path, clean in status.items():
        if clean:
            print(bcolors.GREEN + path +  bcolors.ENDC)
        else:
            dirty.append(path)
    [print(bcolors.RED + path +  bcolors.ENDC) for path in dirty]
    return dirty


# This probably will break and could be more robust
# Works for now
def printClearly(output):
    text = output.decode()
    text = text.split('\n')
    text = text[:-1]   # empty last line
    for line in text:
        if line[1] =='M':
            print(bcolors.PINK +'Modified: ', line[3:], bcolors.ENDC)
        elif line[1]=='?':
            print(bcolors.BLUE +'Untracked: ', line[3:], bcolors.ENDC)
        elif line[1]=='D':
            print(bcolors.RED + 'Deleted: ', line[3:], bcolors.ENDC)
        elif line[0]=='A':
            print(bcolors.GREEN + 'Added: ', line[3:], bcolors.ENDC)


def printDirty(dirty):
    for path in dirty:
        os.chdir(path)
        cmd = "git status"
        cmd = "git status --porcelain"
        ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
        output = ps.communicate()[0]
        line = '-'*50
        print(bcolors.RED + line)
        print(path)
        print(bcolors.ENDC)
        printClearly(output)


def gitStatus(folders):
    status = checkFolders(folders)
    dirty = printStatus(status)
    printDirty(dirty)


def gitPush(folders):
    for f in folders:
        tmp_dir = os.path.join(os.path.expanduser('~'), f)
        if os.path.isdir(tmp_dir):
            os.chdir(tmp_dir)
            print(bcolors.YELLOW)
            print('-'*50)
            print(tmp_dir)
            print(bcolors.ENDC)

            cmd = "git add ."
            ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
            cmd = 'git commit -m "{}"'.format(input('Commit message: '))
            ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
            cmd = "git push"
            ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
            output = ps.communicate()[0]
            print(output.decode())



def gitPull(folders):
    for f in folders:
        tmp_dir = os.path.join(os.path.expanduser('~'), f)
        if os.path.isdir(tmp_dir):
            os.chdir(tmp_dir)
            print(bcolors.YELLOW)
            print('-'*50)
            print(tmp_dir)
            print(bcolors.ENDC)
            cmd = "git pull"
            ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
            output = ps.communicate()[0]
            print(output.decode())

# Not mine. Do not know exactly how it works. Uses GitPython "import git"
def git_status():
    repo = Repo('./')
    o = repo.remotes.origin
    o.fetch()
    # Tags
    tags = []
    for t in repo.tags:
        tags.append({"name": t.name, "commit": str(t.commit), "date": t.commit.committed_date,
                        "committer": t.commit.committer.name, "message": t.commit.message})
    try:
        branch_name = repo.active_branch.name
        # test1
    except:
        branch_name = None

    changes = []
    commits_behind = repo.iter_commits('master..origin/master')

    for c in list(commits_behind):
        changes.append({"committer": c.committer.name, "message": c.message})

    return json.dumps({"tags": tags, "headcommit": str(repo.head.commit), "branchname": branch_name,
                        "master": {"changes": changes}})
# print(git_status())


folders = ['.files', 'blog', 'phd', 'Documents/latex/Notes']

if len(sys.argv) > 1:
    if sys.argv[1] == 'pull':
        gitPull(folders)
    elif sys.argv[1] == 'push':
        gitStatus(folders)
        gitPush(folders)
    else:
        print(bcolors.WARNING)
        print('Unknown input: ', bcolors.ENDC, sys.argv[1])
        print(bcolors.WARNING + 'Use "pull", "push" or no input.', bcolors.ENDC)
        sys.exit()
else:
    gitStatus(folders)
