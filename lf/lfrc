# lf

# https://godoc.org/github.com/gokcehan/lf

########################################################################################
# Information
########################################################################################
# Prefix
# :  read (default)  builtin/custom command
# $  shell           shell command
# %  shell-pipe      shell command running with the ui
# !  shell-wait      shell command waiting for key press
# &  shell-async     shell command running asynchronously
# $f   current file
# $fs  selected file(s) separated with 'filesep'
# $fx  current file or selected file(s) if any
# $id  id number of the client


########################################################################################
## SETTINGS
########################################################################################
# zsh does not split words by default as described **here7**, 
# which makes it difficult to work with $fs and $fx variables, 
# but a compatibility option named shwordsplit is provided for this purpose.

$EDITOR nvim
set shell zsh
set shellopts '-eu:--shwordsplit'
set ifs "\n"
set filesep "\n"  # default already

set scrolloff 10  # leave some space at the top and the bottom of the screen
set drawbox       # borders
set incsearch     #  boolean  (default off)
set preview true
set dircounts   # what does this do?
set previewer ~/.files/lf/preview.sh
# set icons           #  boolean  (default off)

# make sure trash folder exists
%mkdir -p ~/.trash


########################################################################################
# MAPPINGS
########################################################################################

map D
map c
map d
map gh
map i
map m
map n
map v
map p
map w
map y

# map - ~/.config/lf/draw_img.sh $f
map n !nvim -c NV 
map v !nvim -c Files
map o open
map <enter> open 
map D delete
map dd cut
map dD delete
map yy copy
map pp paste
map cw push r<c-w>
map I push r<home>
map A rename
map mkdir push %mkdir<space>
map cc clear
map bulk bulk-rename 

map yd % echo -n $PWD | pbcopy
map yp % echo -n $f | pbcopy
map yn % basename $f | pbcopy

# execute current file (must be executable)
map x $$f
map X !$f

# Movement
map gho cd ~
map gro cd /
map gfi cd ~/.files
map gtu cd ~/TurnGPT
map gbl cd ~/ErikEkstedt.github.io
map gpi cd ~/Pictures
map gdw cd ~/Downloads
map gdo cd ~/Documents

map <c-t> fzf_jump
map <c-b> fzf_cd_from_home
map <c-n> fzf_cd_from_here
map <c-f> fzf_jump
# map <esc> quit  # quit all too often

# Git
map gpl %git pull
map glo !git log
map ghi !git hist

# map - $~/.files/lf/draw_img.sh $f

########################################################################################
# Commands
########################################################################################
# $f   current file
# $fs  selected file(s) separated with 'filesep'
# $fx  current file or selected file(s) if any
# $id  id number of the client

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

# move current file or selected files to trash folder (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        video/*) vlc $fx;;
        image/*) $OPENER $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}

# extract the current file with the right command (xkcd link: https://xkcd.com/1168/ )
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}
# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

########################################################################################
# FZF 
########################################################################################

cmd fzf_jump ${{
   res="$(fd -a | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
lf -remote "send $id $cmd \"$res\""
}}


cmd fzf_cd_from_home ${{
  cd ~
  res="$(fd --type d --hidden --no-ignore --exclude .git | fzf --preview 'tree -L 1 -C {} | head -200'  --header='Jump to directory')"
  res=~/$res
  lf -remote "send $id cd \"$res\""
}}

cmd fzf_cd_from_here ${{
  res="$(fd --type d --hidden --no-ignore --exclude .git | fzf --preview 'tree -L 1 -C {} | head -200'  --header='Jump to directory')"
  lf -remote "send $id cd \"$res\""
}}


